name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies (frontend)
        run: |
          cd frontend
          npm install

      - name: Install dependencies (backend)
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-frontend:latest ./frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-backend:latest ./backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-ai-service:latest ./ai-service
          docker push ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-ai-service:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Write the private key to a file
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
            chmod 600 /tmp/ssh_key

            # Debug: List files in the repository
            echo "Repository contents:"
            ls -R

            # Check if docker-compose.yml exists in the financial-dashboard directory
            if [ ! -f ./financial-dashboard/docker-compose.yml ]; then
              echo "Error: docker-compose.yml not found in the financial-dashboard directory!"
              exit 1
            fi

            # Clean up unused Docker resources on the server
            ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "docker system prune -a -f"

            # Copy docker-compose.yml to the server
            scp -o StrictHostKeyChecking=no -i /tmp/ssh_key ./financial-dashboard/docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/ec2-user/financial-dashboard/

            # Pull the latest Docker images
            ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
              docker pull ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-frontend:latest
              docker pull ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-backend:latest
              docker pull ${{ secrets.DOCKER_USERNAME }}/financial-dashboard-ai-service:latest
            "

            # Stop and start the containers using docker-compose
            ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
              docker-compose -f /home/ec2-user/financial-dashboard/docker-compose.yml down
              docker-compose -f /home/ec2-user/financial-dashboard/docker-compose.yml up -d
            "
